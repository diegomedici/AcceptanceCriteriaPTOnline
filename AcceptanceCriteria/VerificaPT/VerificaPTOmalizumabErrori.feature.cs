// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AcceptanceCriteria.VerificaPT
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("VerificaPTOmalizumab", Description="\tIn order to avoid silly mistakes\r\n\tAs a math idiot\r\n\tI want to be told the sum o" +
        "f two numbers", SourceFile="VerificaPT\\VerificaPTOmalizumabErrori.feature", SourceLine=0)]
    public partial class VerificaPTOmalizumabFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "VerificaPTOmalizumabErrori.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "VerificaPTOmalizumab", "\tIn order to avoid silly mistakes\r\n\tAs a math idiot\r\n\tI want to be told the sum o" +
                    "f two numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Minsan",
                        "Descrizione",
                        "ATC",
                        "FormaFarmaceutica",
                        "UnitàPosologiche",
                        "Grammatura"});
            table1.AddRow(new string[] {
                        "036892053",
                        "XOLAIR 1SIR 75MG",
                        "R03DX05",
                        "SOLUZIONE INIETTABILE",
                        "1",
                        "75 mg"});
            table1.AddRow(new string[] {
                        "036892089",
                        "XOLAIR 1SIR 150MG",
                        "R03DX05",
                        "SOLUZIONE INIETTABILE",
                        "1",
                        "150 mg"});
#line 7
 testRunner.Given("i seguenti dati dalla BD", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Posologia",
                        "Grammatura 75mg",
                        "Grammatura 150mg"});
            table2.AddRow(new string[] {
                        "75",
                        "1",
                        "0"});
            table2.AddRow(new string[] {
                        "150",
                        "0",
                        "1"});
            table2.AddRow(new string[] {
                        "225",
                        "1",
                        "1"});
            table2.AddRow(new string[] {
                        "300",
                        "0",
                        "2"});
            table2.AddRow(new string[] {
                        "375",
                        "1",
                        "2"});
            table2.AddRow(new string[] {
                        "450",
                        "0",
                        "3"});
            table2.AddRow(new string[] {
                        "525",
                        "1",
                        "3"});
            table2.AddRow(new string[] {
                        "600",
                        "0",
                        "4"});
#line 11
 testRunner.And("le seguenti combinazioni di unità posologiche di somministrazioni dell\'OMALIZIMAB" +
                    "", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "CodiceFiscale",
                        "Guid"});
            table3.AddRow(new string[] {
                        "MDGDGI70B12E704B",
                        "7a2c3353-12b6-47b1-b566-3f2779f6fc9d"});
#line 21
 testRunner.And("il codice fiscale ha il seguente guid", ((string)(null)), table3, "And ");
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Codice fiscale sconosciuto", SourceLine=24)]
        public virtual void CodiceFiscaleSconosciuto()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Codice fiscale sconosciuto", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "ATC",
                        "FormaFarmaceutica",
                        "DataInizio",
                        "Prescrizione",
                        "Posologia",
                        "Frequenza",
                        "Durata",
                        "GuidCodiceFiscale"});
            table4.AddRow(new string[] {
                        "R03DX05",
                        "SOLUZIONE INIETTABILE",
                        "01/07/2017",
                        "525 mg ogni 4 settimane per 6 mesi",
                        "525 mg",
                        "4 settimane",
                        "6 mesi",
                        "7a2c3353-12b6-47b1-b566-3f2779f6fc9d"});
#line 26
 testRunner.Given("Il seguente piano terapeutico", ((string)(null)), table4, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Minsan",
                        "Confezioni",
                        "DataRicetta",
                        "CodiceFiscale"});
            table5.AddRow(new string[] {
                        "036892053",
                        "2",
                        "13/07/2017",
                        "DLBMRC86B26C618P"});
#line 29
 testRunner.When("viene effettuata la chiamata al servizio VerificaPT con i seguenti parametri", ((string)(null)), table5, "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Esito",
                        "ConfezioniAutorizzate",
                        "ConfezioniResidue",
                        "DataInizioPeriodo",
                        "DataFinePeriodo",
                        "DataInizioPiano",
                        "DataFinePiano",
                        "KeyError",
                        "DescrizioneErrore"});
            table6.AddRow(new string[] {
                        "true",
                        "0",
                        "0",
                        "",
                        "",
                        "",
                        "",
                        "1",
                        "CODICE_FISCALE_SCONOSCIUTO"});
#line 32
 testRunner.Then("la risposta è la seguente", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Piano terapeutico Inesistente", SourceLine=36)]
        public virtual void PianoTerapeuticoInesistente()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Piano terapeutico Inesistente", ((string[])(null)));
#line 37
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "ATC",
                        "FormaFarmaceutica",
                        "DataInizio",
                        "Prescrizione",
                        "Posologia",
                        "Frequenza",
                        "Durata",
                        "GuidCodiceFiscale"});
            table7.AddRow(new string[] {
                        "R03DX05",
                        "SOLUZIONE INIETTABILE",
                        "01/07/2017",
                        "525 mg ogni 4 settimane per 6 mesi",
                        "525 mg",
                        "4 settimane",
                        "6 mesi",
                        "35f04343-77e8-4c4b-bc57-af38d04ef132"});
#line 38
 testRunner.Given("Il seguente piano terapeutico", ((string)(null)), table7, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Minsan",
                        "Confezioni",
                        "DataRicetta",
                        "CodiceFiscale"});
            table8.AddRow(new string[] {
                        "036892053",
                        "2",
                        "13/07/2017",
                        "MDGDGI70B12E704B"});
#line 41
 testRunner.When("viene effettuata la chiamata al servizio VerificaPT con i seguenti parametri", ((string)(null)), table8, "When ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Esito",
                        "ConfezioniAutorizzate",
                        "ConfezioniResidue",
                        "DataInizioPeriodo",
                        "DataFinePeriodo",
                        "DataInizioPiano",
                        "DataFinePiano",
                        "KeyError",
                        "DescrizioneErrore"});
            table9.AddRow(new string[] {
                        "false",
                        "0",
                        "0",
                        "",
                        "",
                        "",
                        "",
                        "2",
                        "PT_INESISTENTE"});
#line 44
 testRunner.Then("la risposta è la seguente", ((string)(null)), table9, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Piano Terapeutico Scaduto da più di 30 gg", SourceLine=47)]
        public virtual void PianoTerapeuticoScadutoDaPiuDi30Gg()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Piano Terapeutico Scaduto da più di 30 gg", ((string[])(null)));
#line 48
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "ATC",
                        "FormaFarmaceutica",
                        "DataInizio",
                        "Prescrizione",
                        "Posologia",
                        "Frequenza",
                        "Durata",
                        "GuidCodiceFiscale"});
            table10.AddRow(new string[] {
                        "R03DX05",
                        "SOLUZIONE INIETTABILE",
                        "01/07/2017",
                        "525 mg ogni 4 settimane per 6 mesi",
                        "525 mg",
                        "4 settimane",
                        "6 mesi",
                        "7a2c3353-12b6-47b1-b566-3f2779f6fc9d"});
#line 49
 testRunner.Given("Il seguente piano terapeutico", ((string)(null)), table10, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Minsan",
                        "Confezioni",
                        "DataRicetta",
                        "CodiceFiscale"});
            table11.AddRow(new string[] {
                        "036892053",
                        "2",
                        "31/01/2018",
                        "MDGDGI70B12E704B"});
#line 52
 testRunner.When("viene effettuata la chiamata al servizio VerificaPT con i seguenti parametri", ((string)(null)), table11, "When ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Esito",
                        "ConfezioniAutorizzate",
                        "ConfezioniResidue",
                        "DataInizioPeriodo",
                        "DataFinePeriodo",
                        "DataInizioPiano",
                        "DataFinePiano",
                        "KeyError",
                        "DescrizioneErrore"});
            table12.AddRow(new string[] {
                        "false",
                        "0",
                        "0",
                        "",
                        "",
                        "",
                        "",
                        "3",
                        "PT_SCADUTO"});
#line 55
 testRunner.Then("la risposta è la seguente", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
