// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AcceptanceCriteria.VerificaPT
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("WBC-1028_Verifica Presenza PT in presenza di erogazioni", Description="\tIN ORDER TO sapere se posso procedere con un ordine di OMALIZUMAB \r\n\tAS farmacia" +
        "\r\n\tI WANT TO verificare la disponibilità di un PT di OMALIZUMAB in presenza di e" +
        "rogazioni", SourceFile="VerificaPT\\WBC-1028_Verifica_Presenza_PT_ConErogazioni.feature", SourceLine=0)]
    public partial class WBC_1028_VerificaPresenzaPTInPresenzaDiErogazioniFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "WBC-1028_Verifica_Presenza_PT_ConErogazioni.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "WBC-1028_Verifica Presenza PT in presenza di erogazioni", "\tIN ORDER TO sapere se posso procedere con un ordine di OMALIZUMAB \r\n\tAS farmacia" +
                    "\r\n\tI WANT TO verificare la disponibilità di un PT di OMALIZUMAB in presenza di e" +
                    "rogazioni", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Minsan",
                        "Descrizione",
                        "ATC",
                        "FormaFarmaceutica",
                        "UnitàPosologiche",
                        "Grammatura"});
            table1.AddRow(new string[] {
                        "036892053",
                        "XOLAIR 1SIR 75MG",
                        "R03DX05",
                        "SOLUZIONE INIETTABILE",
                        "1",
                        "75 mg"});
            table1.AddRow(new string[] {
                        "036892089",
                        "XOLAIR 1SIR 150MG",
                        "R03DX05",
                        "SOLUZIONE INIETTABILE",
                        "1",
                        "150 mg"});
#line 8
 testRunner.Given("i seguenti dati dalla BD", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Posologia",
                        "Grammatura 75mg",
                        "Grammatura 150mg"});
            table2.AddRow(new string[] {
                        "75",
                        "1",
                        "0"});
            table2.AddRow(new string[] {
                        "150",
                        "0",
                        "1"});
            table2.AddRow(new string[] {
                        "225",
                        "1",
                        "1"});
            table2.AddRow(new string[] {
                        "300",
                        "0",
                        "2"});
            table2.AddRow(new string[] {
                        "375",
                        "1",
                        "2"});
            table2.AddRow(new string[] {
                        "450",
                        "0",
                        "3"});
            table2.AddRow(new string[] {
                        "525",
                        "1",
                        "3"});
            table2.AddRow(new string[] {
                        "600",
                        "0",
                        "4"});
#line 12
 testRunner.And("le seguenti combinazioni di unità posologiche di somministrazioni dell\'OMALIZIMAB" +
                    "", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "CodiceFiscale",
                        "Guid"});
            table3.AddRow(new string[] {
                        "MDGDGI70B12E704B",
                        "7a2c3353-12b6-47b1-b566-3f2779f6fc9d"});
#line 22
 testRunner.And("il codice fiscale ha il seguente guid", ((string)(null)), table3, "And ");
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("1. Erogazione con 1 movimento e residuo insufficiente", SourceLine=25)]
        public virtual void _1_ErogazioneCon1MovimentoEResiduoInsufficiente()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("1. Erogazione con 1 movimento e residuo insufficiente", ((string[])(null)));
#line 26
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "ATC",
                        "FormaFarmaceutica",
                        "DataInizio",
                        "Prescrizione",
                        "Posologia",
                        "Frequenza",
                        "Durata",
                        "GuidCodiceFiscale",
                        "CodicePT"});
            table4.AddRow(new string[] {
                        "R03DX05",
                        "SOLUZIONE INIETTABILE",
                        "01/07/2017",
                        "525 mg ogni 4 settimane per 6 mesi",
                        "525 mg",
                        "4 settimane",
                        "6 mesi",
                        "7a2c3353-12b6-47b1-b566-3f2779f6fc9d",
                        "NH6F5J20K2C5TCPD"});
#line 27
 testRunner.Given("Il seguente piano terapeutico", ((string)(null)), table4, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "CodicePT",
                        "Confezioni",
                        "Minsan",
                        "DataRicetta",
                        "DataErogazione",
                        "NumeroRicetta",
                        "CodiceFarmacia"});
            table5.AddRow(new string[] {
                        "NH6F5J20K2C5TCPD",
                        "1",
                        "036892053",
                        "05/07/2017",
                        "",
                        "",
                        ""});
#line 30
 testRunner.And("le seguenti erogazioni di prodotti associate al PT = NH6F5J20K2C5TCPD", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Minsan",
                        "Confezioni",
                        "DataRicetta",
                        "CodiceFiscale"});
            table6.AddRow(new string[] {
                        "036892053",
                        "2",
                        "13/07/2017",
                        "MDGDGI70B12E704B"});
#line 33
 testRunner.When("viene effettuata la chiamata al servizio VerificaPT con i seguenti parametri", ((string)(null)), table6, "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Esito",
                        "ConfezioniAutorizzate",
                        "ConfezioniResidue",
                        "DataInizioPeriodo",
                        "DataFinePeriodo",
                        "DataInizioPiano",
                        "DataFinePiano",
                        "CodicePT",
                        "KeyError",
                        "DescrizioneErrore"});
            table7.AddRow(new string[] {
                        "true",
                        "2",
                        "1",
                        "01/07/2017",
                        "25/08/2017",
                        "01/07/2017",
                        "31/12/2017",
                        "NH6F5J20K2C5TCPD",
                        "5",
                        "RESIDUO_INSUFFICIENTE"});
#line 36
 testRunner.Then("la risposta è la seguente", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("2. Erogazione con 2 movimenti e residuo 0", SourceLine=40)]
        public virtual void _2_ErogazioneCon2MovimentiEResiduo0()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("2. Erogazione con 2 movimenti e residuo 0", ((string[])(null)));
#line 41
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "ATC",
                        "FormaFarmaceutica",
                        "DataInizio",
                        "Prescrizione",
                        "Posologia",
                        "Frequenza",
                        "Durata",
                        "GuidCodiceFiscale",
                        "CodicePT"});
            table8.AddRow(new string[] {
                        "R03DX05",
                        "SOLUZIONE INIETTABILE",
                        "01/07/2017",
                        "525 mg ogni 4 settimane per 6 mesi",
                        "525 mg",
                        "4 settimane",
                        "6 mesi",
                        "7a2c3353-12b6-47b1-b566-3f2779f6fc9d",
                        "NH6F5J20K2C5TCPD"});
#line 42
 testRunner.Given("Il seguente piano terapeutico", ((string)(null)), table8, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "CodicePT",
                        "Confezioni",
                        "Minsan",
                        "DataRicetta",
                        "DataErogazione",
                        "NumeroRicetta",
                        "CodiceFarmacia"});
            table9.AddRow(new string[] {
                        "NH6F5J20K2C5TCPD",
                        "1",
                        "036892053",
                        "05/07/2017",
                        "",
                        "",
                        ""});
            table9.AddRow(new string[] {
                        "NH6F5J20K2C5TCPD",
                        "1",
                        "036892053",
                        "10/07/2017",
                        "",
                        "",
                        ""});
#line 45
 testRunner.And("le seguenti erogazioni di prodotti associate al PT = NH6F5J20K2C5TCPD", ((string)(null)), table9, "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Minsan",
                        "Confezioni",
                        "DataRicetta",
                        "CodiceFiscale"});
            table10.AddRow(new string[] {
                        "036892053",
                        "2",
                        "13/07/2017",
                        "MDGDGI70B12E704B"});
#line 49
 testRunner.When("viene effettuata la chiamata al servizio VerificaPT con i seguenti parametri", ((string)(null)), table10, "When ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Esito",
                        "ConfezioniAutorizzate",
                        "ConfezioniResidue",
                        "DataInizioPeriodo",
                        "DataFinePeriodo",
                        "DataInizioPiano",
                        "DataFinePiano",
                        "CodicePT",
                        "KeyError",
                        "DescrizioneErrore"});
            table11.AddRow(new string[] {
                        "true",
                        "2",
                        "0",
                        "01/07/2017",
                        "25/08/2017",
                        "01/07/2017",
                        "31/12/2017",
                        "NH6F5J20K2C5TCPD",
                        "?",
                        "RESIDUO_0"});
#line 52
 testRunner.Then("la risposta è la seguente", ((string)(null)), table11, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("3. Erogazione con 2 movimenti e disponibilità", SourceLine=56)]
        public virtual void _3_ErogazioneCon2MovimentiEDisponibilita()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("3. Erogazione con 2 movimenti e disponibilità", ((string[])(null)));
#line 57
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "ATC",
                        "FormaFarmaceutica",
                        "DataInizio",
                        "Prescrizione",
                        "Posologia",
                        "Frequenza",
                        "Durata",
                        "GuidCodiceFiscale",
                        "CodicePT"});
            table12.AddRow(new string[] {
                        "R03DX05",
                        "SOLUZIONE INIETTABILE",
                        "01/07/2017",
                        "525 mg ogni 4 settimane per 6 mesi",
                        "525 mg",
                        "4 settimane",
                        "6 mesi",
                        "7a2c3353-12b6-47b1-b566-3f2779f6fc9d",
                        "NH6F5J20K2C5TCPD"});
#line 58
 testRunner.Given("Il seguente piano terapeutico", ((string)(null)), table12, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "CodicePT",
                        "Confezioni",
                        "Minsan",
                        "DataRicetta",
                        "DataErogazione",
                        "NumeroRicetta",
                        "CodiceFarmacia"});
            table13.AddRow(new string[] {
                        "NH6F5J20K2C5TCPD",
                        "1",
                        "036892053",
                        "05/07/2017",
                        "",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "NH6F5J20K2C5TCPD",
                        "1",
                        "036892053",
                        "10/07/2017",
                        "",
                        "",
                        ""});
#line 61
 testRunner.And("le seguenti erogazioni di prodotti associate al PT = NH6F5J20K2C5TCPD", ((string)(null)), table13, "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Minsan",
                        "Confezioni",
                        "DataRicetta",
                        "CodiceFiscale"});
            table14.AddRow(new string[] {
                        "036892053",
                        "2",
                        "30/07/2017",
                        "MDGDGI70B12E704B"});
#line 65
 testRunner.When("viene effettuata la chiamata al servizio VerificaPT con i seguenti parametri", ((string)(null)), table14, "When ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Esito",
                        "ConfezioniAutorizzate",
                        "ConfezioniResidue",
                        "DataInizioPeriodo",
                        "DataFinePeriodo",
                        "DataInizioPiano",
                        "DataFinePiano",
                        "CodicePT",
                        "KeyError",
                        "DescrizioneErrore"});
            table15.AddRow(new string[] {
                        "true",
                        "2",
                        "2",
                        "29/07/2017",
                        "22/09/2017",
                        "01/07/2017",
                        "31/12/2017",
                        "NH6F5J20K2C5TCPD",
                        "",
                        ""});
#line 68
 testRunner.Then("la risposta è la seguente", ((string)(null)), table15, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("4. Erogazione con 3 movimenti, 2 dei quali nel passato, e residuo insufficiente", SourceLine=72)]
        public virtual void _4_ErogazioneCon3Movimenti2DeiQualiNelPassatoEResiduoInsufficiente()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("4. Erogazione con 3 movimenti, 2 dei quali nel passato, e residuo insufficiente", ((string[])(null)));
#line 73
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "ATC",
                        "FormaFarmaceutica",
                        "DataInizio",
                        "Prescrizione",
                        "Posologia",
                        "Frequenza",
                        "Durata",
                        "GuidCodiceFiscale",
                        "CodicePT"});
            table16.AddRow(new string[] {
                        "R03DX05",
                        "SOLUZIONE INIETTABILE",
                        "01/07/2017",
                        "525 mg ogni 4 settimane per 6 mesi",
                        "525 mg",
                        "4 settimane",
                        "6 mesi",
                        "7a2c3353-12b6-47b1-b566-3f2779f6fc9d",
                        "NH6F5J20K2C5TCPD"});
#line 74
 testRunner.Given("Il seguente piano terapeutico", ((string)(null)), table16, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "CodicePT",
                        "Confezioni",
                        "Minsan",
                        "DataRicetta",
                        "DataErogazione",
                        "NumeroRicetta",
                        "CodiceFarmacia"});
            table17.AddRow(new string[] {
                        "NH6F5J20K2C5TCPD",
                        "1",
                        "036892053",
                        "05/07/2017",
                        "",
                        "",
                        ""});
            table17.AddRow(new string[] {
                        "NH6F5J20K2C5TCPD",
                        "1",
                        "036892053",
                        "10/07/2017",
                        "",
                        "",
                        ""});
            table17.AddRow(new string[] {
                        "NH6F5J20K2C5TCPD",
                        "1",
                        "036892053",
                        "29/07/2017",
                        "",
                        "",
                        ""});
#line 77
 testRunner.And("le seguenti erogazioni di prodotti associate al PT = NH6F5J20K2C5TCPD", ((string)(null)), table17, "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Minsan",
                        "Confezioni",
                        "DataRicetta",
                        "CodiceFiscale"});
            table18.AddRow(new string[] {
                        "036892053",
                        "2",
                        "30/07/2017",
                        "MDGDGI70B12E704B"});
#line 82
 testRunner.When("viene effettuata la chiamata al servizio VerificaPT con i seguenti parametri", ((string)(null)), table18, "When ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Esito",
                        "ConfezioniAutorizzate",
                        "ConfezioniResidue",
                        "DataInizioPeriodo",
                        "DataFinePeriodo",
                        "DataInizioPiano",
                        "DataFinePiano",
                        "CodicePT",
                        "KeyError",
                        "DescrizioneErrore"});
            table19.AddRow(new string[] {
                        "true",
                        "2",
                        "1",
                        "29/07/2017",
                        "22/09/2017",
                        "01/07/2017",
                        "31/12/2017",
                        "NH6F5J20K2C5TCPD",
                        "5",
                        "RESIDUO_INSUFFICIENTE"});
#line 85
 testRunner.Then("la risposta è la seguente", ((string)(null)), table19, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("5. PT con frequenza di 2w, erogazione con molti movimenti, alcuni nel passato, e " +
            "disponibilità", SourceLine=89)]
        public virtual void _5_PTConFrequenzaDi2WErogazioneConMoltiMovimentiAlcuniNelPassatoEDisponibilita()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("5. PT con frequenza di 2w, erogazione con molti movimenti, alcuni nel passato, e " +
                    "disponibilità", ((string[])(null)));
#line 90
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "ATC",
                        "FormaFarmaceutica",
                        "DataInizio",
                        "Prescrizione",
                        "Posologia",
                        "Frequenza",
                        "Durata",
                        "GuidCodiceFiscale",
                        "CodicePT"});
            table20.AddRow(new string[] {
                        "R03DX05",
                        "SOLUZIONE INIETTABILE",
                        "01/07/2017",
                        "525 mg ogni 2 settimane per 6 mesi",
                        "525 mg",
                        "2 settimane",
                        "6 mesi",
                        "7a2c3353-12b6-47b1-b566-3f2779f6fc9d",
                        "NH6F5J20K2C5TCPD"});
#line 91
 testRunner.Given("Il seguente piano terapeutico", ((string)(null)), table20, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "CodicePT",
                        "Confezioni",
                        "Minsan",
                        "DataRicetta",
                        "DataErogazione",
                        "NumeroRicetta",
                        "CodiceFarmacia"});
            table21.AddRow(new string[] {
                        "NH6F5J20K2C5TCPD",
                        "1",
                        "036892053",
                        "05/07/2017",
                        "",
                        "",
                        ""});
            table21.AddRow(new string[] {
                        "NH6F5J20K2C5TCPD",
                        "1",
                        "036892053",
                        "10/07/2017",
                        "",
                        "",
                        ""});
            table21.AddRow(new string[] {
                        "NH6F5J20K2C5TCPD",
                        "1",
                        "036892053",
                        "29/07/2017",
                        "",
                        "",
                        ""});
            table21.AddRow(new string[] {
                        "NH6F5J20K2C5TCPD",
                        "3",
                        "036892089",
                        "29/07/2017",
                        "",
                        "",
                        ""});
            table21.AddRow(new string[] {
                        "NH6F5J20K2C5TCPD",
                        "3",
                        "036892089",
                        "05/08/2017",
                        "",
                        "",
                        ""});
#line 94
 testRunner.And("le seguenti erogazioni di prodotti associate al PT = NH6F5J20K2C5TCPD", ((string)(null)), table21, "And ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Minsan",
                        "Confezioni",
                        "DataRicetta",
                        "CodiceFiscale"});
            table22.AddRow(new string[] {
                        "036892089",
                        "3",
                        "11/08/2017",
                        "MDGDGI70B12E704B"});
#line 101
 testRunner.When("viene effettuata la chiamata al servizio VerificaPT con i seguenti parametri", ((string)(null)), table22, "When ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Esito",
                        "ConfezioniAutorizzate",
                        "ConfezioniResidue",
                        "DataInizioPeriodo",
                        "DataFinePeriodo",
                        "DataInizioPiano",
                        "DataFinePiano",
                        "CodicePT",
                        "KeyError",
                        "DescrizioneErrore"});
            table23.AddRow(new string[] {
                        "true",
                        "15",
                        "9",
                        "29/07/2017",
                        "06/10/2017",
                        "01/07/2017",
                        "31/12/2017",
                        "NH6F5J20K2C5TCPD",
                        "",
                        ""});
#line 104
 testRunner.Then("la risposta è la seguente", ((string)(null)), table23, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("6. PT con frequenza di 2w, erogazione con molti movimenti, alcuni nel passato, e " +
            "residuo 0", SourceLine=108)]
        public virtual void _6_PTConFrequenzaDi2WErogazioneConMoltiMovimentiAlcuniNelPassatoEResiduo0()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("6. PT con frequenza di 2w, erogazione con molti movimenti, alcuni nel passato, e " +
                    "residuo 0", ((string[])(null)));
#line 109
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "ATC",
                        "FormaFarmaceutica",
                        "DataInizio",
                        "Prescrizione",
                        "Posologia",
                        "Frequenza",
                        "Durata",
                        "GuidCodiceFiscale",
                        "CodicePT"});
            table24.AddRow(new string[] {
                        "R03DX05",
                        "SOLUZIONE INIETTABILE",
                        "01/07/2017",
                        "525 mg ogni 2 settimane per 6 mesi",
                        "525 mg",
                        "2 settimane",
                        "6 mesi",
                        "7a2c3353-12b6-47b1-b566-3f2779f6fc9d",
                        "NH6F5J20K2C5TCPD"});
#line 110
 testRunner.Given("Il seguente piano terapeutico", ((string)(null)), table24, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "CodicePT",
                        "Confezioni",
                        "Minsan",
                        "DataRicetta",
                        "DataErogazione",
                        "NumeroRicetta",
                        "CodiceFarmacia"});
            table25.AddRow(new string[] {
                        "NH6F5J20K2C5TCPD",
                        "1",
                        "036892053",
                        "05/07/2017",
                        "",
                        "",
                        ""});
            table25.AddRow(new string[] {
                        "NH6F5J20K2C5TCPD",
                        "1",
                        "036892053",
                        "10/07/2017",
                        "",
                        "",
                        ""});
            table25.AddRow(new string[] {
                        "NH6F5J20K2C5TCPD",
                        "1",
                        "036892053",
                        "29/07/2017",
                        "",
                        "",
                        ""});
            table25.AddRow(new string[] {
                        "NH6F5J20K2C5TCPD",
                        "3",
                        "036892089",
                        "29/07/2017",
                        "",
                        "",
                        ""});
            table25.AddRow(new string[] {
                        "NH6F5J20K2C5TCPD",
                        "3",
                        "036892089",
                        "05/08/2017",
                        "",
                        "",
                        ""});
            table25.AddRow(new string[] {
                        "NH6F5J20K2C5TCPD",
                        "3",
                        "036892089",
                        "05/08/2017",
                        "",
                        "",
                        ""});
            table25.AddRow(new string[] {
                        "NH6F5J20K2C5TCPD",
                        "4",
                        "036892089",
                        "05/08/2017",
                        "",
                        "",
                        ""});
#line 113
 testRunner.And("le seguenti erogazioni di prodotti associate al PT = NH6F5J20K2C5TCPD", ((string)(null)), table25, "And ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Minsan",
                        "Confezioni",
                        "DataRicetta",
                        "CodiceFiscale"});
            table26.AddRow(new string[] {
                        "036892089",
                        "3",
                        "11/08/2017",
                        "MDGDGI70B12E704B"});
#line 122
 testRunner.When("viene effettuata la chiamata al servizio VerificaPT con i seguenti parametri", ((string)(null)), table26, "When ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Esito",
                        "ConfezioniAutorizzate",
                        "ConfezioniResidue",
                        "DataInizioPeriodo",
                        "DataFinePeriodo",
                        "DataInizioPiano",
                        "DataFinePiano",
                        "CodicePT",
                        "KeyError",
                        "DescrizioneErrore"});
            table27.AddRow(new string[] {
                        "true",
                        "15",
                        "0",
                        "29/07/2017",
                        "06/10/2017",
                        "01/07/2017",
                        "31/12/2017",
                        "NH6F5J20K2C5TCPD",
                        "?",
                        "RESIDUO_0"});
#line 125
 testRunner.Then("la risposta è la seguente", ((string)(null)), table27, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("7. PT con frequenza di 2w, erogazione con molti movimenti, alcuni nel passato, a " +
            "fine pt e residuo insufficiente", SourceLine=129)]
        public virtual void _7_PTConFrequenzaDi2WErogazioneConMoltiMovimentiAlcuniNelPassatoAFinePtEResiduoInsufficiente()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("7. PT con frequenza di 2w, erogazione con molti movimenti, alcuni nel passato, a " +
                    "fine pt e residuo insufficiente", ((string[])(null)));
#line 130
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "ATC",
                        "FormaFarmaceutica",
                        "DataInizio",
                        "Prescrizione",
                        "Posologia",
                        "Frequenza",
                        "Durata",
                        "GuidCodiceFiscale",
                        "CodicePT"});
            table28.AddRow(new string[] {
                        "R03DX05",
                        "SOLUZIONE INIETTABILE",
                        "01/07/2017",
                        "525 mg ogni 2 settimane per 6 mesi",
                        "525 mg",
                        "2 settimane",
                        "6 mesi",
                        "7a2c3353-12b6-47b1-b566-3f2779f6fc9d",
                        "NH6F5J20K2C5TCPD"});
#line 131
 testRunner.Given("Il seguente piano terapeutico", ((string)(null)), table28, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "CodicePT",
                        "Confezioni",
                        "Minsan",
                        "DataRicetta",
                        "DataErogazione",
                        "NumeroRicetta",
                        "CodiceFarmacia"});
            table29.AddRow(new string[] {
                        "NH6F5J20K2C5TCPD",
                        "1",
                        "036892053",
                        "05/07/2017",
                        "",
                        "",
                        ""});
            table29.AddRow(new string[] {
                        "NH6F5J20K2C5TCPD",
                        "1",
                        "036892053",
                        "10/07/2017",
                        "",
                        "",
                        ""});
            table29.AddRow(new string[] {
                        "NH6F5J20K2C5TCPD",
                        "1",
                        "036892053",
                        "29/07/2017",
                        "",
                        "",
                        ""});
            table29.AddRow(new string[] {
                        "NH6F5J20K2C5TCPD",
                        "3",
                        "036892089",
                        "29/07/2017",
                        "",
                        "",
                        ""});
            table29.AddRow(new string[] {
                        "NH6F5J20K2C5TCPD",
                        "3",
                        "036892089",
                        "05/08/2017",
                        "",
                        "",
                        ""});
            table29.AddRow(new string[] {
                        "NH6F5J20K2C5TCPD",
                        "3",
                        "036892089",
                        "05/08/2017",
                        "",
                        "",
                        ""});
            table29.AddRow(new string[] {
                        "NH6F5J20K2C5TCPD",
                        "4",
                        "036892089",
                        "05/08/2017",
                        "",
                        "",
                        ""});
            table29.AddRow(new string[] {
                        "NH6F5J20K2C5TCPD",
                        "1",
                        "036892089",
                        "31/12/2017",
                        "",
                        "",
                        ""});
#line 134
 testRunner.And("le seguenti erogazioni di prodotti associate al PT = NH6F5J20K2C5TCPD", ((string)(null)), table29, "And ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Minsan",
                        "Confezioni",
                        "DataRicetta",
                        "CodiceFiscale"});
            table30.AddRow(new string[] {
                        "036892089",
                        "3",
                        "30/12/2017",
                        "MDGDGI70B12E704B"});
#line 144
 testRunner.When("viene effettuata la chiamata al servizio VerificaPT con i seguenti parametri", ((string)(null)), table30, "When ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Esito",
                        "ConfezioniAutorizzate",
                        "ConfezioniResidue",
                        "DataInizioPeriodo",
                        "DataFinePeriodo",
                        "DataInizioPiano",
                        "DataFinePiano",
                        "CodicePT",
                        "KeyError",
                        "DescrizioneErrore"});
            table31.AddRow(new string[] {
                        "true",
                        "3",
                        "2",
                        "30/12/2017",
                        "31/12/2017",
                        "01/07/2017",
                        "31/12/2017",
                        "NH6F5J20K2C5TCPD",
                        "5",
                        "RESIDUO_INSUFFICIENTE"});
#line 147
 testRunner.Then("la risposta è la seguente", ((string)(null)), table31, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
