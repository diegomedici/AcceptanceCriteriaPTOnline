// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AcceptanceCriteria.VerificaPT
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("WBC-1002_Verifica_Presenza_PT", Description="\tIN ORDER TO sapere se posso procedere con un ordine di OMALIZUMAB \r\n\tAS farmacia" +
        "\r\n\tI WANT TO verificare la presenza di un PT di OMALIZUMAB ", SourceFile="VerificaPT\\DPC-1146_Gestione CodicePT per integrazione PTOL.feature", SourceLine=0)]
    public partial class WBC_1002_Verifica_Presenza_PTFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DPC-1146_Gestione CodicePT per integrazione PTOL.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "WBC-1002_Verifica_Presenza_PT", "\tIN ORDER TO sapere se posso procedere con un ordine di OMALIZUMAB \r\n\tAS farmacia" +
                    "\r\n\tI WANT TO verificare la presenza di un PT di OMALIZUMAB ", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("1. Memorizzazione e trasmissione del CodicePT", SourceLine=5)]
        public virtual void _1_MemorizzazioneETrasmissioneDelCodicePT()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("1. Memorizzazione e trasmissione del CodicePT", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Esito",
                        "ConfezioniAutorizzate",
                        "ConfezioniResidue",
                        "DataInizioPeriodo",
                        "DataFinePeriodo",
                        "DataInizioPiano",
                        "DataFinePiano",
                        "CodicePT"});
            table1.AddRow(new string[] {
                        "true",
                        "2",
                        "2",
                        "01/07/2017",
                        "25/08/2017",
                        "01/07/2017",
                        "31/12/2017",
                        "NH6F5J20K2C5TCPD"});
#line 7
 testRunner.Given("la seguente risposta al servizio VerificaPT delle ricetta =\"120171000000001\"", ((string)(null)), table1, "Given ");
#line 10
 testRunner.When("la farmacia effettua la chiusura della ricetta=\"120171000000001\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "CodicePT",
                        "Confezioni",
                        "Minsan",
                        "DataRicetta",
                        "DataErogazione",
                        "NumeroRicetta",
                        "CodiceFarmacia"});
            table2.AddRow(new string[] {
                        "NH6F5J20K2C5TCPD",
                        "2",
                        "036892053",
                        "2017-09-06",
                        "2017-09-07",
                        "120171000000001",
                        "1234"});
#line 11
 testRunner.Then("viene trasmessa la seguente erogazione di prodotti a WBC", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
